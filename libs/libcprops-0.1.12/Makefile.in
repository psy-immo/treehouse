# libcprops - c prototyping tools Makefile
#
# This is the Makefile for libcprops - c prototyping tools. If it has the name 
# "Makefile.in" then it is a template for a Makefile;  to generate the actual 
# Makefile, run "./configure", which is a configuration script generated by the
# "autoconf" program (constructs like "@foo@" will get replaced in the actual 
# Makefile.
#
# Copyright (c) 2005-2007 by Ilan Aelion
# iaelion@users.sourceforge.net
# 
# 2007-11-30 V @CPROPSVERSION@
#
###############################################

srcdir = @srcdir@
prefix = @prefix@
exec_prefix = @exec_prefix@

subdirs = @subdirs@

CPROPSVERSION = @CPROPSVERSION@
CPROPSLIBVERSION = @CPROPSLIBVERSION@

# top_builddir is needed for the $(LIBTOOL) definition

top_builddir := @root_dir@

bindir = $(DESTDIR)@bindir@
libdir = $(DESTDIR)@libdir@
incdir = $(DESTDIR)@includedir@/cprops
mandir = $(DESTDIR)@mandir@
datadir = @datarootdir@

man3dir = $(mandir)/man3

OPT_OBJS = @OPT_OBJS@
OPT_TARGETS = @OPT_TARGETS@
OPT_INSTALL= @OPT_INSTALL@

OBJS   =  util.o log.o collection.o mempool.o vector.o str.o \
		  linked_list.o heap.o priority_list.o hashtable.o \
		  hashlist.o mtab.o trie.o avl.o rb.o splay.o \
		  sorted_hash.o nary.o multimap.o wtab.o wtrie.o \
		  bstr.o rtrie.o \
		  thread.o socket.o client.o http.o httpclient.o $(OPT_OBJS)
LOBJS  =  $(OBJS:.o=.lo)		  
HEADER =  config.h common.h collection.h mempool.h util.h log.h \
		  vector.h str.h heap.h linked_list.h priority_list.h \
		  hashtable.h hashlist.h trie.h avl.h rb.h mtab.h splay.h \
		  sorted_hash.h nary.h multimap.h wtab.h wtrie.h rtrie.h \
		  bstr.h \
	  	  thread.h socket.h client.h http.h httpclient.h $(OPT_OBJS:.o=.h)

TEST_SRC = testhttpsrv.c
TEST_OBJ = $(TEST_SRC:.c=.o)
TEST_BIN = $(TEST_SRC:.c=)

CC      =  @CC@
CFLAGS  =  -D_REENTRANT @CFLAGS@
SED     =  @SED@
DEFS    =  @DEFS@
LDFLAGS =  @LDFLAGS@
LIBS    =  @LIBS@
SHELL   =  @SHELL@
LIBTOOL =  @LIBTOOL@

MAKEDEPEND = @MAKEDEPEND@

INSTALL = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_DATA = @INSTALL_DATA@

PGSQL_SRC=@PGSQL_SRC@
PGSQL_OBJ=@PGSQL_OBJ@
PGSQL_HDR=@PGSQL_HDR@
PGSQL_CFLAGS=@PGSQL_CFLAGS@
PGSQL_LDFLAGS=@PGSQL_LDFLAGS@
PGSQL_LIBS=@PGSQL_LIBS@
CP_DBMS_PGSQL_LIBVERSION=@CP_DBMS_PGSQL_LIBVERSION@

MYSQL_SRC=@MYSQL_SRC@
MYSQL_OBJ=@MYSQL_OBJ@
MYSQL_HDR=@MYSQL_HDR@
MYSQL_CFLAGS=@MYSQL_CFLAGS@
MYSQL_LDFLAGS=@MYSQL_LDFLAGS@
MYSQL_LIBS=@MYSQL_LIBS@
CP_DBMS_MYSQL_LIBVERSION=@CP_DBMS_MYSQL_LIBVERSION@

DEPEND=$(MAKEDEPEND) $(CFLAGS)

all: libcprops.la $(OPT_TARGETS) $(subdirs)

.PHONY: all $(subdirs) clean clean-recursive distclean distclean-recursive \
        install install-libcprops install-recursive \
		uninstall uninstall-recursive \
		install-libcp-dbms-postgres install-libcp-dbms-mysql  

$(subdirs): | libcprops.la
	(cd $@ && $(MAKE) || fail=yes; cd $(top_builddir); test -z "$$fail")

libcprops.la: $(OBJS)
	$(LIBTOOL) --mode=link $(CC) $(CFLAGS) -rpath $(libdir) \
		-version-info '$(CPROPSLIBVERSION)' -export-dynamic \
		-o libcprops.la $(LOBJS) $(LIBS)

$(PGSQL_OBJ): $(PGSQL_SRC) $(PGSQL_HDR)
	$(LIBTOOL) --mode=compile $(CC) $(PGSQL_CFLAGS) $(DEFS) -c $(PGSQL_SRC)

libcp_dbms_postgres.la: libcprops.la $(PGSQL_OBJ)
	$(LIBTOOL) --mode=link $(CC) $(PGSQL_CFLAGS) -rpath $(libdir) \
		-version-info '$(CP_DBMS_PGSQL_LIBVERSION)' -export-dynamic \
		$(PGSQL_LDFLAGS) -o libcp_dbms_postgres.la $(PGSQL_OBJ:.o=.lo) \
		$(PGSQL_LIBS) libcprops.la

db_mysql.o: db_mysql.c db_mysql.h
	$(LIBTOOL) --mode=compile $(CC) $(MYSQL_CFLAGS) $(DEFS) -c $<

libcp_dbms_mysql.la: libcprops.la db_mysql.o
	$(LIBTOOL) --mode=link $(CC) $(MYSQL_CFLAGS) -rpath $(libdir) \
		-version-info '$(CP_DBMS_MYSQL_LIBVERSION)' -export-dynamic \
		$(MYSQL_LDFLAGS) -o libcp_dbms_mysql.la $(MYSQL_OBJ:.o=.lo) \
		$(MYSQL_LIBS) libcprops.la

test: $(TEST_BIN)

$(TEST_BIN): $(TEST_OBJ) all
	$(CC) $(CFLAGS) -L.libs $(LDFLAGS) -o $@ $(@:=).o -lcprops $(LIBS)

$(TEST_OBJ): $(TEST_SRC)
	$(CC) $(CFLAGS) -c $(LDFLAGS) -o $@ $(@:.o=.c)

.c.o:
	$(LIBTOOL) --mode compile $(CC) $(CFLAGS) $(DEFS) -c $<

install: install-libcprops $(OPT_INSTALL) install-recursive

install-libcp-dbms-postgres: all installdirs
	@echo "installing postgres dbms driver libcp_dbms_postgres.so"
	$(LIBTOOL) --mode=install $(INSTALL) libcp_dbms_postgres.la \
	           $(libdir)/libcp_dbms_postgres.la
	@$(INSTALL_DATA) $(PGSQL_HDR) $(incdir)
	$(LIBTOOL) --finish $(libdir)

install-libcp-dbms-mysql: all installdirs
	@echo "installing mysql dbms driver libcp_dbms_mysql.so"
	$(LIBTOOL) --mode=install $(INSTALL) libcp_dbms_mysql.la \
	           $(libdir)/libcp_dbms_mysql.la
	@$(INSTALL_DATA) $(MYSQL_HDR) $(incdir)
	$(LIBTOOL) --finish $(libdir)

install-libcprops: all installdirs
	@echo "Installing libcprops"
	$(LIBTOOL) --mode=install $(INSTALL) libcprops.la $(libdir)/libcprops.la
	@$(INSTALL_DATA) $(HEADER) $(incdir)
	@ls man3/ | grep -v CVS | grep -v '.svn' | sed 's/^/man3\//' > .manpages
	@$(INSTALL_DATA) `cat .manpages` $(man3dir)
	rm -f .manpages
	$(LIBTOOL) --finish $(libdir)

installdirs:
	$(SHELL) ${srcdir}/mkinstalldirs $(libdir) $(man3dir) $(incdir)

install-recursive:
	@list='$(subdirs)'; \
	for subdir in $$list; do \
	  (cd $$subdir && $(MAKE) install) || fail=yes; \
	done; \
	test -z "$$fail"

uninstall: uninstall-recursive
	@echo "Uninstalling libcprops"
	$(LIBTOOL) --mode=uninstall $(libdir)
	@echo removing header files
	if [ -d $(incdir) ]; then \
		pushd $(incdir) ; \
		rm -f $(HEADER) ; \
		popd; \
	fi
	@echo removing man pages
	ls man3/ | grep -v CVS | grep -v '.svn' | sed "s|^|$(man3dir)/|" > .manpages
	rm -f `cat .manpages`
	rm -f .manpages

uninstall-recursive: 
	@list='$(subdirs)'; \
	for subdir in $$list; do \
	  (cd $$subdir && $(MAKE) uninstall) || fail=yes; \
	done; \
	test -z "$$fail"

clean: clean-recursive
	rm -rf core* *.o *.lo *.loT *.la *.so *.a .libs/* $(TEST_BIN) test*.log

clean-recursive:
	@list='$(subdirs)'; \
	for subdir in $$list; do \
	  (cd $$subdir && $(MAKE) clean) || fail=yes; \
	done; \
	test -z "$$fail"

distclean: clean
	rm -rf Makefile config.cache config.h config.log config.status autom4te.cache aclocal.m4 libtool

$(OBJS): Makefile

depend: $(OBJS:.o=.c)
	@$(DEPEND) $(OBJS:.o=.c) > /dev/null 2>&1
