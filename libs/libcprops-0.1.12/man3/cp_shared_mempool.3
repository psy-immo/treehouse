.TH cp_mempool 3 "SEPTEMBER 2006" libcprops.0.1.6 "libcprops - cp_mempool"
.SH NAME
cp_shared_mempool \- a shareable memory pool implementation

.SH DESCRIPTION
cp_shared_mempool is a collection of cp_mempool objects. cp_shared_mempool
allows sharing cp_mempool instances that serve the same allocation size. 
Call cp_shared_mempool_register to request an allocation size and use the 
returned cp_mempool. 
.sp
cp_shared_mempool may also be used for aribitrary sizes allocations, but
this does not necessarily improve performance. Tests on Open BSD show 
significant gains, whereas tests on Linux show a performance degradation for
generic allocation operations. Using cp_shared_mempool to share cp_mempool
objects between cp_* data structures does not reduce performance. The test
results are not conclusive and performance characteristics may also be 
application specific. For best results, benchmark performance for your 
application in realistic deployment scenarios before deciding whether to use
cp_shared_mempool.
.sp
After instantiating a cp_shared_mempool, you may set one of 
CP_SHARED_MEMPOOL_FASTER or CP_SHARED_MEMPOOL_SMALLER. If FASTER is set, 
requests for unregistered allocation sizes will return the requested size
rounded up to the machine word size, after instantiating a cp_mempool 
serving the requested size if none exists. This could potentially use up
large amounts of memory. If SMALLER is set, unregistered allocation sizes
are rounded up to the next bit. E.g. a request for 513 bytes will return a
chunk of 1024 bytes. This might also use up large amounts of memory. 

.SH INTERFACE
the following is a summary of functions provided by \fI<cprops/mempool.h>\fP.
.sp
.BI "cp_shared_mempool *cp_shared_mempool_create();
.br
.BI "cp_shared_mempool *
.ti +5n
.BI "cp_shared_mempool_create_by_option(int " mode ", 
.ti +40n 
.BI "int " size_hint ", 
.ti +40n
.BI "int " page_count ");
.br
.BI "void cp_shared_mempool_destroy(cp_shared_mempool *" pool ");
.br
.BI "cp_mempool *cp_shared_mempool_register(cp_shared_mempool *" pool ", 
.ti +39n
.BI "size_t " size ");
.br
.BI "void *cp_shared_mempool_alloc(cp_shared_mempool *" pool ", size_t " size ");
.br
.BI "void *cp_shared_mempool_calloc(cp_shared_mempool *" pool ", size_t " size ");
.br
.BI "void cp_shared_mempool_free(cp_shared_mempool *" pool ", void *" p ");
.SH SEE ALSO
.BR cp_shared_mempool_create (3), 
.BR cp_shared_mempool_destroy (3), 
.BR cp_shared_mempool_register (3), 
.BR cp_shared_mempool_alloc (3), 
.BR cp_shared_mempool_free (3),
.BR cp_mempool (3)
