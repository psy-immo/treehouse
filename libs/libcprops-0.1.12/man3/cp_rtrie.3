.TH cp_rtrie 3 "NOVEMBER 2011" libcprops.0.1.9 "libcprops - cp_rtrie"
.SH NAME
cp_rtrie \- a bit sequence radix trie implementation

.SH INTERFACE
the following is a summary of functions provided by \fI<cprops/rtrie.h>\fP.

.BI "cp_rtrie *cp_rtrie_create(int " mode ");
.br
.BI "cp_rtrie *cp_rtrie_create_trie(int " mode ",
.ti +29n
.BI "cp_copy_fn " copy_leaf ", 
.ti +29n
.BI "cp_destructor_fn " delete_leaf ");
.br
.BI "int cp_rtrie_destroy(cp_rtrie *" trie ");
.br
.BI "int cp_rtrie_add(cp_rtrie *" trie ", cp_bstr *" key ", void *" leaf ");
.br
.BI "int cp_rtrie_remove(cp_rtrie *" trie ", cp_bstr *" key ", void **" leaf ");
.br
.BI "int cp_rtrie_prefix_match(cp_rtrie *" trie ", cp_bstr *" key ", void **" leaf ");
.br
.BI "void *cp_rtrie_exact_match(cp_rtrie *" trie ", cp_bstr *" key "); 
.br
.BI "cp_vector *cp_rtrie_fetch_matches(cp_rtrie *" trie ", cp_bstr *" key ");
.sp
.BI "int cp_rtrie_lock(cp_rtrie *" trie ", int " type ");
.br
.BI "int cp_rtrie_rdlock(cp_rtrie *" trie ");
.br
.BI "int cp_rtrie_wrlock(cp_rtrie *" trie "); 
.br
.BI "int cp_rtrie_unlock(cp_rtrie *" trie ");
.sp
.BI "int cp_rtrie_get_mode(cp_rtrie *" trie ");
.br
.BI "int cp_rtrie_set_mode(cp_rtrie *" trie ", int " mode ");
.br
.BI "int cp_rtrie_unset_mode(cp_rtrie *" trie ", int " mode ");

.SH DESCRIPTION
.B cp_rtrie
is a bit string radix tree implementation. The trie data sructure allows
efficient prefix matching. Lookup time is O(m) = O(1) where m is the length of 
the key being matched.

.B cp_rtrie_create
creates a new trie structure, which should be deallocated by calling
\fBcp_rtrie_destroy\fP. 
.B cp_rtrie_create_trie 
also allows setting a
.I copy_leaf
function which is used when adding leaves if 
.I mode
has the 
.B COLLECTION_MODE_COPY
set and a
.I delete_leaf
function which is used when removing leaves or deleting the trie if 
.I mode
has the
.B COLLECTION_MODE_DEEP
bit set.
.sp
.B cp_rtrie_add
sets the mapping for the given 
.I key
to
\fIleaf\fP.
.B cp_rtrie_remove
removes the mapping for 
.I key
from the trie and sets 
.I leaf
to the removed leaf.
.sp
.B cp_rtrie_prefix_match
returns the 
.I leaf
matched by the longest prefix of 
.I key
mapped by the trie. Eg having constructed a trie containing only the mappings 
"0" => "XXX" and "010" => "YYY", a search for "01010" would return "YYY".
.sp
.B cp_rtrie_exact_match 
returns the leaf mapped to by 
.I key
uniquely.
.sp
.B cp_rtrie_fetch_matches
returns a vector containing all values along the path represented by 
.I key
including the exact match if it exists.
.sp
Collection mode bits may be set with
.B cp_rtrie_set_mode
and cleared with \fBcp_rtrie_unset_mode\fP. Note that the COLLECTION_MODE_NOSYNC
bit may not be set while the calling thread owns the collection lock (ie after
calling cp_rtrie_lock and before calling cp_rtrie_unlock). 
.sp
Unless COLLECTION_MODE_NOSYNC is set, single trie operations are synchronized. 
Applications that require transaction-like operations should perform locking
explicitly by calling 
.B cp_rtrie_lock
with 
.I type
set to COLLECTION_LOCK_WRITE or COLLECTION_LOCK_READ, or equivalently, 
.B cp_rtrie_wrlock
or \fBcp_rtrie_rdlock\fP. When the operation is complete, the lock must be 
released with \fBcp_rtrie_unlock\fP.
.SH RETURN VALUE
.B cp_rtrie_create
returns a new trie structure or NULL if a memory allocation failed.
.sp
.B cp_rtrie_destroy returns 0 or -1 if 
.I trie
is NULL.
.sp
.B cp_rtrie_add 
and 
.B cp_rtrie_remove
returns 0 on success or non-zero if a synchronization operation failed.
.sp
.B cp_rtrie_prefix_match
returns the number of prefices mapping to leaves found on the way to the 
longest prefix, or zero if no match was found. 
.sp
.B cp_rtrie_exact_match 
returns the leaf mapped to 
.I key
or NULL if no such mapping exists.
.sp
.B cp_rtrie_fetch_matches
returns all leaves along the path described by
.I key
or NULL if no matches exist or on memory allocation failure. 
.sp
Retrieval and insertion functions may return NULL if locking fails. This 
however should not normally occur unless accessing the trie lock directly 
rather than performing synchronization through the api functions.
