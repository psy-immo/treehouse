.TH cp_multimap 3 "OCT 2007" libcprops.0.1.7 "libcprops - cp_multimap"
.SH NAME
cp_multimap \- a tree based data structure for indexing by multiple indices

.SH DESCRIPTION
.B cp_multimap
is a data structure designed to support multiple indices. 
Indices may be defined at creation time or added dynamically after creation.
The map supports access by key, by index or by CP_OP_* operator to match
the closest entry to the requested entry. 
.sp

The table is instantiated with a primary index. If the primary index is not 
unique, an implicit unique index is created as well. Additional indices may be 
added subsequently. Adding an index implies a full tree scan to create an
additional view on the tree sorted by the new index. cp_multimap_get() 
performs a lookup using the primary index, cp_multimap_get_by_index() 
performs a lookup using a secondary index. As a special case, 
cp_multimap_get_by_index() performs a lookup by the primary index if given
a NULL index descriptor. 
.sp

cp_multimap is somewhat different to other mapping collections in that
there is no mapping as such. Client code supplies entries, a comparison
function and optionaly a key function to extract a key from an entry. If
no key function is given entries are passed directly to the comparison 
function for internal lookups. 
.sp

Key functions match the prototype

.RS
.nf
void *key(void *a);
.fi
.RE

and return a pointer to the appropriate member within the given object. Comparison functions match

.RS
.nf
int comp(void *a, void *b);
.fi
.RE

The return value should be
.br
 > 0  if A > B
.br
 = 0  if A == B
.br
 < 0  if A < B
.br

where A and B are the items pointed at by a and b respectively. If key functions are supplied, the cp_hash_compare_* functions defined in <cprops/hashtable.h> may be used here as well. Otherwise the comparison function must also extract the correct member from the object represented by the parameters a and b.
.sp

The general procedure for using 
.B cp_multimap 
is as follows: 
Define key functions and comparison functions as required. Create a 
.B cp_multimap
using 
.B cp_multimap_create
or \fBcp_multimap_create_by_option\fP. Create indices by calling \fBcp_multimap_create_index\fP. Perform insertions and removals with 
.B cp_multimap_insert
and \fBcp_multimap_remove\fP. 
.B cp_multimap_remove_by_index
allows removing multiple entries that are identical respective to a given index.
.br
.B cp_multimap_get
returns the requested entry using the primary index, and
.B cp_multimap_get_by_index
allows specifying a different index. The functions
.B cp_multimap_find
and
.B cp_multimap_find_by_index
allow lookups for entries by relational operator - the 
.B op
parameter may be one of the following: 
.sp
\fBCP_OP_LT\fP - returns an entry less than the given key
.br
\fBCP_OP_LE\fP - returns an entry less than or equal to the given key
.br
\fBCP_OP_EQ\fP - returns an entry equal to the given key - this is the same as cp_multimap_find
.br
\fBCP_OP_NE\fP - returns an entry not equal to the given key
.br
\fBCP_OP_GE\fP - returns an entry greater or equal to the given key
.br
\fBCP_OP_GT\fP - returns an entry greater than the given key
.sp
Modifying fields on an object in the map that affect the sort order relative to any of the indices should be done by calling
.B cp_multimap_reindex
with the old entry and new entry as parameters. 
.sp
The 
.B cp_multimap_callback
and
.B cp_multimap_callback_by_index
allow a tree traversal by the primary or by a different index. 
.sp
.B cp_multimap_lock
and 
.B cp_multimap_unlock
provide locking for maps not initialized with the
.I COLLECTION_MODE_NOSYNC
mode bit set. 
.B cp_multimap_rdlock
and
.B cp_multimap_wrlock
are aliases for 
.B cp_multimap_lock
with a 
.I type
parameter of
.B COLLECTION_LOCK_READ
and 
.B COLLECTION_LOCK_WRITE
respectively.
.sp
\fBcp_multimap_get_mode\fP, 
.B cp_multimap_set_mode 
and 
.B cp_multimap_unset_mode
may be used to manage the collection mode, with the usual limitations. 
.sp
.B cp_multimap_use_mempool
and
.B cp_multimap_share_mempool
allow using built in memory pool functionality after map creation. 
.sp
See documentation on specific functions for further details.
.sp
.SH INTERFACE
the following is a summary of functions provided by \fI<cprops/multimap.h>\fP.
.sp

.BI "cp_multimap *cp_multimap_create(cp_key_fn " key_fn ", cp_compare_fn " cmp ");
.br
.BI cp_multimap *
.ti +5n
.BI "cp_multimap_create_by_option(int " mode ", cp_key_fn " key_fn ", 
.ti +34n
.BI "cp_compare_fn " cmp ", 
.ti +34n
.BI "cp_copy_fn " copy ", 
.ti +34n
.BI "cp_destructor_fn " dtr ");
.sp
.BI "void cp_multimap_destroy(cp_multimap *" tree ");
.br
.BI "void cp_multimap_destroy_custom(cp_multimap *" tree ", 
.ti +32n
.BI "cp_destructor_fn " dtr ");
.sp
.BI "cp_index *cp_multimap_create_index(cp_multimap *" map ", 
.ti +35n
.BI "cp_index_type " type ",
.ti +35n
.BI "cp_key_fn " key ", 
.ti +35n
.BI "cp_compare_fn " cmp ",
.ti +35n
.BI "int *" err ");
.sp
.BI "void *cp_multimap_insert(cp_multimap *" tree ", void *" entry ", int *" err ");
.br
.BI "void *cp_multimap_get(cp_multimap *" tree ", void *" entry ");
.br
.BI "void *cp_multimap_get_by_index(cp_multimap *" map ", 
.ti +31n
.BI "cp_index *" index ", 
.ti +31n
.BI "void *" entry ");
.br
.BI "void *cp_multimap_find(cp_multimap *" map ", void *" key ", cp_op " op ");
.br
.BI "void *cp_multimap_find_by_index(cp_multimap *" map ", 
.ti +32n
.BI "cp_index *" index ", 
.ti +32n
.BI "void *" entry ", 
.ti +32n
.BI "cp_op " op ");
.br
.BI "int cp_multimap_contains(cp_multimap *" tree ", void *" entry ");
.br
.BI "void *cp_multimap_remove(cp_multimap *" tree ", void *" entry ");
.br
.BI "void *cp_multimap_remove_by_index(cp_multimap *" map ",
.ti +34n
.BI "cp_index *" index ", 
.ti +34n
.BI "void *" entry ");
.br
.BI "int cp_multimap_reindex(cp_multimap *" map ", void *" before ", void *" after ");
.sp
.BI "int cp_multimap_callback_preorder(cp_multimap *" tree ", 
.ti +34n
.BI "cp_callback_fn " callback ", 
.ti +34n
.BI "void *" prm ");
.br
.BI "int cp_multimap_callback(cp_multimap *" tree ", 
.ti +25n
.BI "cp_callback_fn " callback ", 
.ti +25n
.BI "void *" prm ");
.br
.BI "int cp_multimap_callback_by_index(cp_multimap *" tree ", 
.ti +34n
.BI "cp_index *" index ", 
.ti +34n
.BI "cp_callback_fn " callback ", 
.ti +34n
.BI "void *" prm ");
.br
.BI "int cp_multimap_callback_postorder(cp_multimap *" tree ", 
.ti +35n
.BI "cp_callback_fn " callback ", 
.ti +35n
.BI "void *" prm ");
.sp
.BI "int cp_multimap_size(cp_multimap * " map ");
.br
.BI "int cp_multimap_count(cp_multimap *" tree ");
.sp
.BI "int cp_multimap_lock(cp_multimap *" tree ", int " type ");
.br
.BI "int cp_multimap_rdlock(cp_multimap *" tree ");
.br
.BI "int cp_multimap_wrlock(cp_multimap *" tree ");
.br
.BI "int cp_multimap_unlock(cp_multimap *" tree ");
.sp
.BI "int cp_multimap_get_mode(cp_multimap *" tree ");
.br
.BI "int cp_multimap_set_mode(cp_multimap *" tree ", int " mode ");
.br
.BI "int cp_multimap_unset_mode(cp_multimap *" tree ", int " mode ");
.sp
.BI "int cp_multimap_use_mempool(cp_multimap *" tree ", cp_mempool *" pool ");
.br
.BI "int cp_multimap_share_mempool(cp_multimap *" tree ", 
.ti +30n
.BI "cp_shared_mempool *" pool ");
.sp
.SH EXAMPLE
.PP
.nf

#include <stdio.h>
#include <stdlib.h>
#include <cprops/multimap.h>

struct box
{
	float width;
	float length;
	float height;
};

struct box *create_box()
{
	struct box *b = (struct box *) malloc(sizeof(struct box));
	b->width = (float) (rand() % 10000) / 100;
	b->length = (float) (rand() % 10000) / 100;
	b->height = (float) (rand() % 10000) / 100;
	
	return b;
}

void print_box(struct box *b)
{
	printf("[%p] %02.02f x %02.02f x %02.02f = %02.02f cm^3\\n", 
			b, b->width, b->length, b->height, 
			b->width * b->length * b->height);
}

int print_box_cb(cp_index_map_node *n, void *prm)
{
	int i;
	cp_vector *items = (cp_vector *) n->entry;
	for (i = 0; i < cp_vector_size(items); i++)
		print_box(cp_vector_element_at(items, i));

	return 0;
}

void *box_width(void *p)
{
	return &((struct box *) p)->width;
}

int box_width_cmp(void *p, void *q)
{
	return *(float *) p - *(float *) q;
}

int box_volume_cmp(void *p, void *q)
{
	struct box *pp = (struct box *) p;
	struct box *qq = (struct box *) q;
	return pp->width * pp->length * pp->height - 
            qq->width * qq->length * qq->height;
}

int main(int argc, char *argv[])
{
	int i;
	cp_multimap *t;
	cp_index *volume_index;

	srand(time(NULL));

	t = cp_multimap_create_by_option(COLLECTION_MODE_MULTIPLE_VALUES | 
                                      COLLECTION_MODE_DEEP | 
                                      COLLECTION_MODE_NOSYNC, 
                                      (cp_key_fn) box_width, 
                                      (cp_compare_fn) box_width_cmp, 
                                      NULL, /* no copy function */
                                      free);

	volume_index = 
		cp_multimap_create_index(t, CP_MULTIPLE, NULL, box_volume_cmp, NULL);

	printf("creating 10 boxes\\n");
	for (i = 0; i < 10; i++)
	{
		struct box *b = create_box();
		print_box(b);
		cp_multimap_insert(t, b, NULL);
	}

	printf("\\nboxes sorted by width\\n");
	cp_multimap_callback(t, (cp_callback_fn) print_box_cb, NULL);

	printf("\\nboxes sorted by volume\\n");
	cp_multimap_callback_by_index(t, volume_index, 
                                   (cp_callback_fn) print_box_cb, 
                                   NULL);

	cp_multimap_destroy(t);

	return 0;
}

.PP

.SH SEE ALSO
.BR cp_multimap_create (3), 
.BR cp_multimap_create_index (3), 
.BR cp_multimap_insert (3), 
.BR cp_multimap_get (3), 
.BR cp_multimap_find (3), 
.BR cp_multimap_contains (3), 
.BR cp_multimap_remove (3), 
.BR cp_multimap_reindex (3), 
.BR cp_multimap_callback (3), 
.BR cp_multimap_count (3), 
.BR cp_multimap_lock (3), 
.BR cp_multimap_set_mode (3), 
.BR cp_multimap_use_mempool (3), 
.BR cprops (3)
