.TH cp_splaytree 3 "MAY 2006" libcprops.0.1.2 "libcprops - cp_splaytree"
.SH NAME
cp_splaytree_create, cp_splaytree_create_by_option, cp_splaytree_destroy,
cp_splaytree_destroy_custom \- splay tree constructor / destructor functions

.SH SYNOPSIS

#include <cprops/splay.h>

.BI "cp_splaytree *cp_splaytree_create(cp_compare_fn " cmp "); 
.br
.B cp_splaytree *
.ti +5n
.BI "cp_splaytree_create_by_option(int " mode ", 
.ti +35n
.BI "cp_compare_fn " compare_fn ",
.ti +35n
.BI "cp_copy_fn " copy_key ", 
.ti +35n 
.BI "cp_destructor_fn " free_key ");    
.ti +35n
.BI "cp_copy_fn " copy_value "
.ti +35n 
.BI "cp_destructor_fn " free_value ");    
.sp

.BI "void cp_splaytree_destroy(cp_splaytree *" tree ");
.br
.BI "void cp_splaytree_destroy_custom(cp_splaytree *" tree ",
.ti +33n
.BI "cp_destructor_fn " dk ",
.ti +33n
.BI "cp_destructor_fn " dv ");

.SH DESCRIPTION
.B cp_splaytree_create
allocates and initializes an splay tree object with the given compare function. 
The compare function should follow this prototype:

.nf
  int cmp(void *a, void *b);
.fi

and return 0 for matching keys, > 0 if a > b and < 0 if a < b (strcmp 
semantics). The created tree is not synchronized (COLLECTION_MODE_NOSYNC mode
bit is set). 
.sp
.B cp_splaytree_create_by_option
allows specifying an initial operation mode. Note that unless 
COLLECTION_MODE_NOSYNC is set on the 
.I mode
parameter, tree operations are synchronized. The 
.I copy_key
and 
.I copy_value
functions are used on insertion if COLLECTION_MODE_COPY is set. If 
COLLECTION_MODE_COPY is set and either of these is NULL, inserted keys and / or
values are inserted directly rather than copies. 
.br
The
.I free_key
and
.I free_value
functions are used on item removal or tree destruction if COLLECTION_MODE_DEEP
is set. If COLLECTION_MODE_DEEP is set and either of these is NULL, no cleanup
is performed on keys and / or values. This makes it possible to apply the copy/
deep mechanism to keys or values only. 
.sp
.B cp_splaytree_destroy
recursively deallocates the tree structure using the current mode settings. 
.B cp_splaytree_destroy_custom
sets the COLLECTION_MODE_DEEP mode bit and destroys the tree using the given
key and value destructor functions. Specifying a NULL destructor function or 
functions precludes key deallocation, value deallocation or both. 

.SH RETURN VALUE
.B cp_splaytree_create
and 
.B cp_splaytree_create_by_option
return a newly allocated cp_splaytree object on success or NULL on failure. 
