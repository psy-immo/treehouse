.TH cp_sorted_hash 3 "SEPTEMBER 2006" libcprops.0.1.6 "libcprops - cp_sorted_hash"
.SH NAME
cp_sorted_hash \- an ordered hash table implementation

.SH DESCRIPTION
cp_sorted_hash is an ordered hash table implementation. Simillarly to 
cp_hashlist, an iteration order is conserved, but whereas in cp_hashlist the
insertion order is maintained, here the ordering is determined by a user 
defined comparison function. Internally a hash table is used to store mappings
by key, and these mappings are held in a red-black tree structure. In effect 
items are indexed by one key for the hash table lookup, and by another key for
the ordered access. 
.sp
This requires two compare functions - one for hash table
operations, as described under cp_hashtable (3), and another for ordering. The
ordering function function should match the following prototype:

.RS
.nf 
int compare_function(cp_mapping *n, cp_mapping *m);
.fi
.RE

cp_mapping is a wrapper defined as 

.RS
.nf
typedef struct _cp_mapping
{
	void *key;
	void *value;
} cp_mapping;
.fi
.RE

The macros

.sp
.BI "void *cp_mapping_key(cp_mapping *" mapping ");
.br
.BI "void *cp_mapping_value(cp_mapping *" mapping ");
.sp
may be used to access mapped keys and values. 
.sp
As a special case, when instantiated with a NULL mapping comparison function, 
the ordering comparison is determined using the hash comparison function. 

.SH INTERFACE
the following is a summary of functions provided by \fI<cprops/sorted_hash.h>\fP.
.sp
.BI "cp_sorted_hash *cp_sorted_hash_create(cp_hashfunction " hash ", 
.ti +38n
.BI "cp_compare_fn " cmp_key ", 
.ti +38n
.BI "cp_mapping_cmp_fn " cmp_mapping ");
.br
.BI "cp_sorted_hash *
.ti +5n
.BI "cp_sorted_hash_create_by_option(int " mode ", 
.ti +37n
.BI "unsigned long " size_hint ",
.ti +37n
.BI "cp_hashfunction " hash ", 
.ti +37n
.BI "cp_compare_fn cmp_key, 
.ti +37n
.BI "cp_mapping_cmp_fn " cmp_mapping ", 
.ti +37n
.BI "cp_copy_fn " key_copy ", 
.ti +37n
.BI "cp_destructor_fn " key_dtr ",
.ti +37n
.BI "cp_copy_fn " val_copy ", 
.ti +37n
.BI "cp_destructor_fn " val_dtr ");
.sp
.BI "void cp_sorted_hash_destroy(cp_sorted_hash *" table ");
.br
.BI "void cp_sorted_hash_destroy_custom(cp_sorted_hash *" table ", 
.ti +35n
.BI "cp_destructor_fn " key_dtr ",
.ti +35n
.BI "cp_destructor_fn " val_dtr ");
.sp
.BI "void *cp_sorted_hash_insert(cp_sorted_hash *" table ", 
.ti +28n
.BI "void *" key ", 
.ti +28n
.BI "void *" value ");
.br
.BI "void *cp_sorted_hash_delete(cp_sorted_hash *" table ", void *" key ");
.br
.BI "void *cp_sorted_hash_get(cp_sorted_hash *" table ", void *" key ");
.br
.BI "int cp_sorted_hash_contains(cp_sorted_hash *" table ", void *" key ");
.sp
.BI "int cp_sorted_hash_callback_preorder(cp_sorted_hash *" table ", 
.ti +37n
.BI "cp_callback_fn " callback ", 
.ti +37n
.BI "void *" prm ");
.br
.BI "int cp_sorted_hash_callback(cp_sorted_hash *" table ", 
.ti +28n
.BI "cp_callback_fn " callback ", 
.ti +28n
.BI "void *" prm ");
.br
.BI "int cp_sorted_hash_callback_postorder(cp_sorted_hash *" table ", 
.ti +38n
.BI "cp_callback_fn " callback ", 
.ti +38
.BI "void *" prm ");
.sp
.BI "int cp_sorted_hash_count(cp_sorted_hash *" table ");
.sp
.BI "int cp_sorted_hash_lock(cp_sorted_hash *" table ", int " type ");
.br
.BI "int cp_sorted_hash_rdlock(cp_sorted_hash *" table ");
.br
.BI "int cp_sorted_hash_wrlock(cp_sorted_hash *" table ");
.br
.BI "int cp_sorted_hash_unlock(cp_sorted_hash *" table ");
.sp
.BI "int cp_sorted_hash_get_mode(cp_sorted_hash *" table ");
.br
.BI "int cp_sorted_hash_set_mode(cp_sorted_hash *" table ", int " mode ");
.br
.BI "int cp_sorted_hash_unset_mode(cp_sorted_hash *" table ", int " mode ");

.SH SEE ALSO
.BR cp_hashtable (3), 
.BR cp_sorted_hash_create (3), 
.BR cp_sorted_hash_destroy (3), 
.BR cp_sorted_hash_insert (3), 
.BR cp_sorted_hash_delete (3), 
.BR cp_sorted_hash_callback (3), 
.BR cp_sorted_hash_set_mode (3), 
.BR cp_sorted_hash_lock (3), 
.BR cp_sorted_hash_count (3)
