.TH cp_rbtree 3 "MAY 2006" libcprops.0.1.3 "libcprops - cp_rbtree"
.SH NAME
cp_rbtree_lock, cp_rbtree_rdlock, cp_rbtree_wrlock, 
cp_rbtree_unlock \- acquire / release a lock on an red-black tree

.SH SYNOPSIS
#include <cprops/rb.h>

.BI "int cp_rbtree_lock(cp_rbtree *" tree ", int " type ");
.br
.BI "int cp_rbtree_rdlock(cp_rbtree *" tree ");
.br
.BI "int cp_rbtree_wrlock(cp_rbtree *" tree ");
.br
.BI "int cp_rbtree_unlock(cp_rbtree *" tree ");

.SH DESCRIPTION
.B cp_rbtree_lock
locks the tree for reading if
.I type 
is 
.B COLLECTION_LOCK_READ
or for writing if 
.I type
is \fBCOLLECTION_LOCK_WRITE\fP. The tree mode may not have
.B COLLECTION_MODE_NOSYNC
set prior to locking. Explicit locking isn't required for single tree 
operations (insertion, retrieval, deletion) which perform locking on their own
but rather for transaction-like operations. To prevent other threads from 
accessing the tree while performing a series of mapping insertion, removal and 
lookup operations, the tree must be explicitly locked first. Tree operation
functions will not attempt locking if the current thread owns the tree lock. 
This prevents deadlocks but leaves the responsibility for using the correct 
kind of locking with the application: if there's any possibility the 
application could change the tree structure in the transaction (ie insert or
remove a mapping), the tree must be write locked. If the transaction consists
of lookups only, the tree may be read locked. 
.sp
Calls to
.B cp_rbtree_lock
must be coupled with calls to 
.B cp_rbtree_unlock 
after the operation is completed. 
.sp
.B cp_rbtree_rdlock(tree)
is a synonym for cp_rbtree_lock(tree, COLLECTION_LOCK_READ).
.br
.B cp_rbtree_wrlock(tree)
is a synonym for cp_rbtree_lock(tree, COLLECTION_LOCK_WRITE).

.SH RETURN VALUE
\fBcp_rbtree_lock\fP, 
.B cp_rbtree_rdlock
and
.B cp_rbtree_wrlock
return 0 on success, EINVAL if COLLECTION_MODE_NOSYNC is set or -1 if locking
fails. 
.br
.B cp_rbtree_unlock
returns 0 on success or -1 if unlocking fails. 
.SH SEE ALSO
.BR cp_rbtree_set_mode (3),
.BR cp_rbtree_insert (3)
