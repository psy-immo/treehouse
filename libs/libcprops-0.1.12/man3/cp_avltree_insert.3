.TH cp_avltree 3 "MAY 2006" libcprops.0.1.2 "libcprops - cp_avltree"
.SH NAME
cp_avltree_insert, cp_avltree_get, cp_avltree_delete, cp_avltree_contains, 
cp_avltree_callback, cp_avltree_count \- AVL tree operations

.SH SYNOPSIS
#include <cprops/avl.h>
.br
#include <cprops/vector.h>

.BI "void *cp_avltree_insert(cp_avltree *" tree ", void *" key ", void *" value ");
.br
.BI "void *cp_avltree_get(cp_avltree *" tree ", void *" key ");
.br
.BI "void *cp_avltree_delete(cp_avltree *" tree ", void *" key ");
.br
.BI "int cp_avltree_contains(cp_avltree *" tree ", void *" key ");
.br
.BI "int cp_avltree_callback(cp_avltree *" tree ", void *" key ");
.br
.BI "long cp_avltree_count(cp_avltree *" tree ");

.SH DESCRIPTION
.B cp_avltree_insert
adds a mapping for the given 
.I key
to the given \fIvalue\fP. If a mapping for the given key already exists and 
COLLECTION_MODE_MULTIPLE_VALUES is not set, the current mapping is replaced, 
and, if COLLECTION_MODE_DEEP is set, the old mapping key and value are
destroyed. If COLLECTION_MODE_MULTIPLE_VALUES is set, the new value is added to
the existing values mapped to the given key. By default 
COLLECTION_MODE_MULTIPLE_VALUES is not set. 
.br
If COLLECTION_MODE_COPY is set, the given 
.I key
and
.I value
parameters are copied before being inserted. Unless COLLECTION_MODE_NOSYNC is
set, the insert function will write-lock the tree before performing the 
insertion. 
.sp
.B cp_avltree_get
returns the current mapping for the requested \fIkey\fP or NULL if none exists.
Unless COLLECTION_MODE_NOSYNC is set, the tree is read-locked. If 
COLLECTION_MODE_MULTIPLE_VALUES is set, the returned value is a 
.BR cp_vector (3)
object containing all values for the given key. 
.sp
.B cp_avltree_delete
removes the current mapping for the given 
.I key
and returns the 
.I value 
associated to it or NULL if there was no mapping for the given key. The return 
value is usable to indicate that a deletion has taken place. Note that the 
returned pointer may be invalid if COLLECTION_MODE_DEEP is set and the tree 
has a non-null value destructor function set. Unless COLLECTION_MODE_NOSYNC is
set, the deletion function write-locks the tree. 
.sp
.B cp_avltree_contains
returns non-zero if the tree contains a mapping for the given 
.I key
or zero if not.
.sp
.B cp_avltree_callback
performs an in-order scan of the tree, invoking the given callback function 
with each mapping and the given parameter. The callback iteration is 
terminated if the callback function returns non-zero. The prototype for the 
callback function is as follows:

.nf
int callback_fn(void *entry, void *client_prm);
.fi

The callback function is invoked iteratively with 
.I entry
pointing at the current tree node. Here is an example callback function 
implementation, which prints the key and value addresses for each mapping:

.nf 
int callback(void *entry, void *prm)
{
	cp_avlnode *node = entry;
	printf("key %p, value %p\n", node->key, node->value);
	return 0;
}
.fi

.sp
.B cp_avltree_count
returns the number of mappings currently stored in a tree.

.SH RETURN VALUE
.B cp_avltree_insert 
and 
.B cp_avltree_delete 
return the affected value on success or NULL on failure. 
.B cp_avltree_get 
returns the value mapped to the requested key or NULL on failure or if no such 
mapping exists.
.sp
Note that these functions may fail if locking fails. This means that for a
synchronized table (ie COLLECTION_MODE_NOSYNC not set), cp_avltree_get could
return NULL although a mapping actually exists. Applications should check 
errno to determine whether no mapping was found (errno not set) or locking has
failed (errno will be set to EBUSY, EINVAL or EDEADLK).
.sp
.B cp_avltree_contains
returns non-zero if the tree contains a mapping for the requested key or zero
if no mapping was found or on locking errors - see above. 
.sp
.B cp_avltree_callback
returns 0 if the iteration completes successfully, -1 on locking error, or the 
non-zero value returned by the callback function causing the iteration to abort.
.sp
.B cp_avltree_count
returns the number of mappings currently stored.
.SH SEE ALSO
.BR cp_avltree_lock (3), 
.BR cp_avltree_set_mode (3),
.BR cp_vector (3)
.BR errno (3)
